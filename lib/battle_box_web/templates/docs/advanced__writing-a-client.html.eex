<h1>Writing A Client</h1>

<p><i><b>Warning:</b> writing a client is an advanced subject for people who want to use programming languages outside the official clients, it is highly recommended for beginners to use the official clients</i></p>

<h2>About this guide</h2>
<p>This guide will go through the steps of building a botskrieg client. The examples are written in python3 and can be more or less translated into any language<p>
<p>Your programming language will need to support the following things</p>
<ul>
  <li>Creating an SSL socket</li>
  <li>Reading and writing UTF-8</li>
  <li>Decoding and encoding JSON</li>
</ul>

<hr>

<h2>Connecting to Botskrieg</h2>
<p>Botskrieg currently supports TCP connections (with Websocket Connections on the way)</p>
<h3>Setting up the connection</h3>

<p>Use your language's socket libraries to connect to botskrieg, use SSL to connect to port 4242 on "botskrieg.com"</p>

<p>Python3 Example Code:</p>
<pre>
import socket
import ssl

connection = socket.create_connection(("botskrieg.com", 4242))
context = ssl.create_default_context()
connection = context.wrap_socket(connection, server_hostname="botskrieg.com")
</pre>

<hr>

<h2>Reading and writing messages</h2>

<p>The structure of messages is shown below. Messages coming from the server should be in this format. Messages going to the server should be encoded in the same way</p>
<p>The first two bytes of the message represent the length in bytes of the JSON encoded data. The message length is Network Order (Big Endian) Unsigned 16 bit integer</p>
<p>Message length is strictly limited to 2 ** 16 (65536) bytes</p>

<div style="display: grid; grid-template-columns: 20% 80%; grid-gap: 10px; color: white; padding: 10px 20px; margin: 0px 40px; border: 2px solid black;">
  <div style="background-color: orange; padding: 10px;"><i>length</i> (2 bytes)</div>
  <div style="background-color: blue; padding: 10px;">JSON Encoded Message Data (<i>length</i> bytes)</div>
</div>

<p>A special ping message can be sent to the server to test your encoding</p>

<p>Python3 Example Code:</p>
<p><i>This uses the "connection" object from the previous example</i></p>
<pre>
import json
import struct

def send_message(connection, msg):
  msg_bytes = str.encode(json.dumps(msg))
  header = struct.pack("!H", len(msg_bytes)) # b'\x00\x06'
  connection.sendall(header + msg_bytes)

def receive_message(connection):
  msg_size_bytes = connection.recv(2)
  (msg_size,) = struct.unpack("!H", msg_size_bytes)
  message_json = connection.recv(msg_size)
  message = json.loads(message_json)
  return message

send_message(connection, "PING")
receive_message(connection) # PONG
</pre>

<hr>

<h2>Authenticating</h2>
<p>After creating an account on botskrieg create an API key here (<a href="<%= Routes.api_key_path(BattleBoxWeb.Endpoint, :new) %>">New API Key</a>)</p>
<p>To authenticate, send the bot name and token in a JSON object of the following form</p>
<pre><%= Jason.encode!(%{"token" => "{YOUR KEY HERE}", "bot" => "some-bot-name"}, pretty: true) %></pre>

<p>Bot names can be any string providing the name meets the following rules</p>
<ul>
  <li>May only contain alphanumeric characters or hyphens. <b>~r/^[a-zA-Z0-9-]+$/</b></li>
  <li>Cannot begin or end with a hyphen.</li>
  <li>Cannot have two hypens in a row</li>
  <li>Maximum is 39 characters.</li>
  <li>Cannot be in the reserved words (or contain bad words)</li>
</ul>

<p>Python3 Example Code:</p>
<p><i>This builds on the functions from the previous examples</i></p>
<pre>
send_message(connection, {"bot": "some-bot-name", "token": "ldluatjpk4kh2nwye63mo7wowy"})
receive_message(connection)
</pre>

<p>On successful authentication you will receive</p>
<pre><%= Jason.encode!(%{bot_server_id: Ecto.UUID.generate(), connection_id: Ecto.UUID.generate(), status: :idle, user_id: Ecto.UUID.generate()}, pretty: true) %></pre>

<p>Don't worry about "bot_server_id", "connection_id", "user_id", those are for some advanced features that haven't shipped yet</p>

<h3>Some authentication errors you may encounter (not limited to)</h2>
<pre>
<%= Jason.encode!(%{error: %{token: ["Invalid API Key"]}}) %>

<%= Jason.encode!(%{error: %{user: ["User is banned"]}}) %>

<%= Jason.encode!(%{error: %{user: ["User connection limit exceeded"]}}) %>

<%= Jason.encode!(%{error: %{bot: %{name: ["Can only contain alphanumeric characters or hyphens"]}}}) %>

<%= Jason.encode!(%{error: %{bot: %{name: ["should be at most 39 character(s)"]}}}) %>

<%= Jason.encode!(%{error: %{bot: %{name: ["Cannot end with a hyphen"]}}}) %>

<%= Jason.encode!(%{error: %{bot: %{name: ["Cannot start with a hyphen"]}}}) %>

<%= Jason.encode!(%{error: %{bot: %{name: ["Cannot contain two hyphens in a row"]}}}) %>
</pre>

<hr>

<h2>Starting a Practice Match</h2>
<p>Start a practice match in the following manner</p>

<pre><%= Jason.encode!(%{action: "practice", opponent: %{}, arena: "some-arena"}) %></pre>

<p>The opponent attribute can be composed of name and difficulty selectors, a random ai that meets the selectors will be choosen</p>
<pre>
<%= Jason.encode!("exact-name") %> # Match "exact-name"
<%= Jason.encode!(["exact-name-1", "exact-name-2"]) %> # Match "exact-name-1" or "exact-name-2"
<%= Jason.encode!(%{name: "exact-name"}) %> # Match "exact-name"
<%= Jason.encode!(%{name: ["exact-name-1", "exact-name-2"]}) %> # Match "exact-name-1" or "exact-name-2"
<%= Jason.encode!(%{difficulty: 4}) %> # Match difficulty of exactly 4
<%= Jason.encode!(%{difficulty: %{min: 1}}) %> # Match any difficulty greater than or equal to 1
<%= Jason.encode!(%{difficulty: %{max: 10}}) %> # Match any difficulty greater than or equal to 1
</pre>

<p>Python3 Example Code:</p>
<pre>
send_message(connection, {"action": "practice", "arena": "robot-game-default", "opponent": "kansas"})
receive_message(connection)
</pre>

<p>On success, you'll recieve the following message</p>
<pre><%= Jason.encode!(%{bot_server_id: Ecto.UUID.generate(), connection_id: Ecto.UUID.generate(), status: :match_making, user_id: Ecto.UUID.generate()}, pretty: true) %></pre>

<h3>Some errors you may encounter (not limited to)</h3>
<pre>
<%= Jason.encode!(%{error: %{arena: ["Arena \"some-arena\" does not exist"]}}) %>

<%= Jason.encode!(%{error: %{opponent: ["No opponent matching ({\"difficulty\":{\"min\":2},\"name\":\"not-real-opponent\"})"]}}) %>
</pre>

<hr>

<h2>Start Match Making</h2>
<p>Start match making in an arena in the following manner</p>
<pre><%= Jason.encode!(%{action: "start_match_making", arena: "some-arena"}) %></pre>

<p>Python3 Example Code:</p>
<pre>
send_message(connection, {"action": "start_match_making", "arena": "robot-game-default"})
receive_message(connection)
</pre>

<p>On success, you'll recieve the following message</p>
<pre><%= Jason.encode!(%{bot_server_id: Ecto.UUID.generate(), connection_id: Ecto.UUID.generate(), status: :match_making, user_id: Ecto.UUID.generate()}, pretty: true) %></pre>

<h3>Some errors you may encounter (not limited to)</h3>
<pre><%= Jason.encode!(%{error: %{arena: ["Arena \"some-arena\" does not exist"]}}) %></pre>

<hr>

<h2>Accepting/Rejecting a Game</h2>
<p>While in the "match_making" state (either from match making or from a practice match) you will receive a message asking to accept a game</p>

<p>You'll get a message the looks like the following</p>
<pre><%= Jason.encode!(%{request_type: "game_request", game_info: %{player: 1, game_id: "{some uuid}", settings: %{"{game_specific_keys}" => "{game_specific_vals}"}}}, pretty: true) %></pre>

<p>To accept the game send the following message</p>
<pre><%= Jason.encode!(%{action: "accept_game", game_id: "{the game_id from the request}"}, pretty: true) %></pre>
<pre>
# After getting into the match making state
game_request = receive_message(connection)
send_message(connection, {"action": "accept_game", "game_id": game_request["game_info"]["game_id"]}
</pre>

<p>The game request settings key will also contain information specifc to the game you're playing, see the specifics for each supported game below</p>

<hr>

<h2>Playing a Game (The Commands Request)</h2>

<h3>When the Commands Deadline is Missed</h2>

<hr>

<h2>When the Game is Cancelled</h2>

<hr>

<hr>When the Game is Over</h2>
